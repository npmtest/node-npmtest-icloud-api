{"/home/travis/build/npmtest/node-npmtest-icloud-api/test.js":"/* istanbul instrument in package npmtest_icloud_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-icloud-api/lib.npmtest_icloud_api.js":"/* istanbul instrument in package npmtest_icloud_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_icloud_api = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_icloud_api = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-icloud-api/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-icloud-api && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_icloud_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_icloud_api\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_icloud_api.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_icloud_api.rollup.js'] =\n            local.assetsDict['/assets.npmtest_icloud_api.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_icloud_api.__dirname + '/lib.npmtest_icloud_api.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-icloud-api/node_modules/icloud-api/lib/base.js":"\"use strict\";\n\nvar fs     = require('fs');\nvar url    = require('url');\nvar Class  = require('uclass');\n\nvar merge   = require('mout/object/merge');\nvar series  = require('async/series');\nvar request = require('nyks/http/request');\nvar sort    = require('nyks/object/sort');\nvar detach  = require('nyks/function/detach');\n\n\n\n\nvar Photo  = require('./services/photo');\nvar Contact = require('./services/contact');\n\n\nvar HEADERS = {\n  'origin': 'https://www.icloud.com',\n  'content-type': 'text/plain',\n};\n\n\nvar parse = require('nyks/http/header/parse').parse_cookie;\n\nvar iCloud = new Class({\n\n  initialize : function() {\n\n  },\n\n\n  loadSessionFile : function(session_path, chain){\n    var session;\n    try {\n      session = fs.readFileSync(session_path);\n      session = JSON.parse(session);\n    } catch(e){ return chain(e) ;}\n    this.loadSession(session, chain);\n  },\n\n  loadSession : function(session, chain){\n    this.session = session;\n    var age = (Date.now() - Number(this.session.session_creation || 0))/1000;\n    if(age > 86400 * 5)\n      return chain(\"Session too old\");\n\n      //detach callback so there is a return value !!\n    var self = this;\n    series([function(chain){\n      self.photo   = new Photo(self, detach(chain));\n    }, function(chain){\n      self.contact = new Contact(self, detach(chain));\n    }], chain);\n\n  },\n\n  saveSession : function(session_path){\n    fs.writeFileSync(session_path, JSON.stringify(this.session, null, 2));\n    console.log(\"Wrote session in %s\", session_path);\n  },\n\n\n  login : function(credentials, chain) {\n\n    var remote = 'https://setup.icloud.com/setup/ws/1/login';\n\n\n    var data = merge({\n        'extended_login': true,\n    }, credentials), self = this;\n\n    request(merge(url.parse(remote), {headers: HEADERS, json:true}), data, function(err, body, res) {\n\n      console.log(\"Hi %s !\", body.dsInfo.fullName);\n  \n      var cookies = res.headers['set-cookie'],\n          jar = {},\n          session_path = 'session.json';\n\n      cookies.forEach(function(cookie){\n        cookie = parse(cookie);\n        jar[cookie.name] = cookie;\n      });\n\n      self.session = sort(body, ['dsInfo', 'webservices']);\n      self.session.jar = jar;\n      self.session.session_creation = Date.now();\n      chain();\n    });\n  },\n\n  request : function(query, data, chain){\n\n    var query = merge(query, {\n      jar : this.session.jar,\n      headers: HEADERS,\n      json : true,\n\n    });\n\n    request(query, data, chain);\n  },\n\n});\n\n\nmodule.exports = iCloud;\n","/home/travis/build/npmtest/node-npmtest-icloud-api/node_modules/icloud-api/lib/services/photo/index.js":"\"use strict\";\r\n\r\nvar url    = require('url');\r\nvar util   = require('util');\r\nvar qs     = require('querystring');\r\n\r\n\r\nvar Class   = require('uclass');\r\nvar merge   = require('mout/object/merge');\r\nvar request = require('nyks/http/request');\r\nvar forIn   = require('mout/object/forIn');\r\nvar pluck   = require('mout/object/pluck');\r\nvar values  = require('mout/object/values');\r\nvar combine = require('nyks/object/combine');\r\nvar mapLimit    = require('async/mapLimit');\r\n\r\n\r\nvar parseChildAssetsBinaryFeed = require('./_parseChildAssetsBinaryFeed');\r\n\r\n\r\nvar iCloud = new Class({\r\n  Binds : ['_fetchAssetsPageInfos'],\r\n\r\n  syncToken : null,\r\n\r\n  initialize : function(icloud, chain){\r\n    var self = this;\r\n\r\n    this.icloud = icloud;\r\n\r\n    var params = {\r\n     // 'clientBuildNumber' : '14E45',\r\n     // 'clientId'          : guid(),\r\n    };\r\n\r\n    params = merge(params, {'dsid': icloud.session['dsInfo']['dsid']});\r\n\r\n    var service_root = icloud.session.webservices['photos']['url'];\r\n    this.service_endpoint = util.format('%s/ph', service_root);\r\n    var remote_url = util.format('%s/startup', this.service_endpoint);\r\n\r\n    var query = merge(url.parse(remote_url));\r\n\r\n    console.log(\"Requesting sync token for photo API\");\r\n\r\n    icloud.request(query, null, function(err, response){\r\n\r\n      self.syncToken = response['syncToken'];\r\n      params = merge(params, {\r\n        'syncToken': self.syncToken,\r\n        //'clientInstanceId': params.clientId,\r\n      });\r\n\r\n      console.log(\"Got sync token\", self.syncToken);\r\n      chain();\r\n\r\n      if(false) res.headers['set-cookie'].forEach(function(cookie){\r\n        cookie = parse(cookie);\r\n        icloud.session.jar[cookie.name] = cookie;\r\n      });\r\n    });\r\n\r\n  },\r\n\r\n\r\n  fetchAlbums : function(chain){\r\n\r\n    var folder_url = util.format('%s/folders', this.service_endpoint);\r\n    var query = merge(url.parse(folder_url), {\r\n      qs : { 'syncToken': this.syncToken },\r\n    });\r\n\r\n    var albums = {};\r\n\r\n    this.icloud.request(query, null, function(err, response) {\r\n      forIn(response.folders, function(album){\r\n        albums[album.serverId] = album;\r\n        if(!album.childAssetsBinaryFeed)\r\n          return;\r\n\r\n        try {\r\n          album.assets = parseChildAssetsBinaryFeed(Buffer(album.childAssetsBinaryFeed, 'base64'));\r\n        } catch(e){ console.error(e); }\r\n\r\n        delete album.childAssetsBinaryFeed;\r\n      \r\n      });\r\n\r\n      chain(null, albums);\r\n    });\r\n  },\r\n\r\n\r\n  fetchMedias : function(album, chain){\r\n    var assetsIds = values(pluck(album.assets, \"asset_id\"));\r\n\r\n    var tasks = [];\r\n    var page = 200;\r\n\r\n    for(var i = 0; i<assetsIds.length ; i+= page)\r\n      tasks.push(assetsIds.slice(i, i+page));\r\n\r\n    //console.log(\"Fetching %d assets, slicing in %d tasks\", assetsIds.length, tasks.length);\r\n\r\n    mapLimit(tasks, 2, this._fetchAssetsPageInfos, function(err, results){\r\n      results = merge.apply({}, results);\r\n\r\n      chain(null, results);\r\n    });\r\n  },\r\n\r\n  _fetchAssetsPageInfos : function (assetsIds, chain) {\r\n\r\n    var fetch_url = util.format('%s/assets', this.service_endpoint);\r\n\r\n    var data = {\r\n      'syncToken': this.syncToken,\r\n      'methodOverride': 'GET',\r\n      'clientIds': assetsIds,\r\n    };\r\n\r\n    var query = merge(url.parse(fetch_url), {\r\n      qs : { 'syncToken': this.syncToken },\r\n    });\r\n\r\n    this.icloud.request(query, data, function(err, response) {\r\n      var assets = {};\r\n      forIn(response.assets, function(asset){\r\n        assets[asset.serverId] = asset;\r\n        asset.versions = {};\r\n\r\n        forIn(asset.derivativeInfo, function(v) {\r\n          var headers = [\"version\", \"width\", \"height\", \"size\", \"mimetype\",  \"u1\", \"u2\", \"filemtime\", \"url\", \"filename\"];\r\n          v = combine(headers, v.split(\":\"));\r\n          v.url = qs.unescape(v.url);\r\n          asset.versions[v.version] = v;\r\n        });\r\n\r\n        delete asset.derivativeInfo;\r\n      });\r\n\r\n      chain(null, assets);\r\n    });\r\n  },\r\n\r\n\r\n  downloadMedia :function(/*media, [quality = 'original',] chain*/){\r\n    var args = [].slice.apply(arguments),\r\n      media = args.shift(),\r\n      chain = args.pop(),\r\n      quality = args.shift() || 'original';\r\n\r\n    var version = media.versions[quality];\r\n    request(version.url, chain);\r\n  },\r\n\r\n\r\n});\r\n\r\n\r\nmodule.exports = iCloud;\r\n","/home/travis/build/npmtest/node-npmtest-icloud-api/node_modules/icloud-api/lib/services/photo/_parseChildAssetsBinaryFeed.js":"\"use strict\";\r\n\r\n/*\r\n* icloud return albums summary in a binary (bit wise) base64 encoded format.\r\n* summary contains very little info about the picture : assetId, ratio & orientation\r\n* This is mostly (only?) used for \"greyed out\" preloading pannels on icloud.com/#photo\r\n*\r\n* see https://github.com/picklepete/pyicloud/blob/master/pyicloud/services/photos.py\r\n*/\r\n\r\nvar fs       = require('fs');\r\nvar util     = require('util');\r\nvar readUInt = require('bitwise').readUInt;\r\n\r\nvar  contains = require('mout/array/contains');\r\n\r\nvar  ASSET_PAYLOAD = 255;\r\nvar  ASSET_WITH_ORIENTATION_PAYLOAD = 254;\r\nvar  ASPECT_RATIOS = [\r\n      0.75,\r\n      4.0 / 3.0 - 3.0 * (4.0 / 3.0 - 1.0) / 4.0,\r\n      4.0 / 3.0 - 2.0 * (4.0 / 3.0 - 1.0) / 4.0,\r\n      1.25,\r\n      4.0 / 3.0, 1.5 - 2.0 * (1.5 - 4.0 / 3.0) / 3.0,\r\n      1.5 - 1.0 * (1.5 - 4.0 / 3.0) / 3.0,\r\n      1.5,\r\n      1.5694444444444444,\r\n      1.6388888888888888,\r\n      1.7083333333333333,\r\n      16.0 / 9.0,\r\n      2.0 - 2.0 * (2.0 - 16.0 / 9.0) / 3.0,\r\n      2.0 - 1.0 * (2.0 - 16.0 / 9.0) / 3.0,\r\n      2,\r\n      3\r\n  ];\r\n\r\nmodule.exports = function parse(buf){\r\n\r\n  var payload_encoding = buf[0];\r\n\r\n  var  valid_payloads = [ASSET_PAYLOAD, ASSET_WITH_ORIENTATION_PAYLOAD];\r\n  if (!contains(valid_payloads, payload_encoding))\r\n    throw util.format(\"Unknown payload encoding '%s'\", payload_encoding);\r\n\r\n  var assets = {}, pos = 8;\r\n\r\n  var range_start , range_length , range_end, previous_asset_id;\r\n  while( buf.length - pos >= 48) {\r\n    \r\n    range_start  = readUInt(buf, pos, 24); pos+= 24;\r\n    range_length = readUInt(buf, pos, 24); pos+= 24;\r\n    range_end    = range_start + range_length;\r\n\r\n    //console.log({ range_start:range_start , range_length:range_length, range_end:range_end});\r\n    previous_asset_id = 0;\r\n\r\n    for(var index = range_start; index < range_end; index++) {\r\n      var aspect_ratio = readUInt(buf, pos, 4); pos+= 4;\r\n      aspect_ratio = ASPECT_RATIOS[aspect_ratio];\r\n\r\n      var asset_id;\r\n      var id_size = readUInt(buf, pos, 2); pos+= 2;\r\n      if(id_size) {// A size has been reserved for the asset id\r\n          var size = 2 +  8 * id_size;\r\n          asset_id = readUInt(buf, pos,  size); pos+= size;\r\n      } else {\r\n          // The id is just an increment to a previous id\r\n          var inc = readUInt(buf, pos,  2); pos+= 2;\r\n          asset_id = previous_asset_id + inc + 1;\r\n      }\r\n\r\n      var orientation = null;\r\n      if(payload_encoding == ASSET_WITH_ORIENTATION_PAYLOAD) {\r\n        orientation = readUInt(buf, pos,  3); pos+= 3;\r\n      }\r\n\r\n      assets[index] = {\r\n        index    : index,\r\n        asset_id : asset_id,\r\n        aspect_ratio: aspect_ratio,\r\n        orientation:orientation,\r\n      };\r\n\r\n      previous_asset_id = asset_id\r\n    }\r\n  }\r\n\r\n  return assets;\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-icloud-api/node_modules/icloud-api/lib/services/contact/index.js":"\"use strict\";\r\n\r\nvar util  = require('util');\r\nvar merge = require('mout/object/merge');\r\n\r\nvar Class = require('uclass');\r\n\r\n\r\nvar Contact = new Class({\r\n\r\n  initialize : function(icloud, chain) {\r\n    this.icloud = icloud;\r\n    //this.session = icloud.session;\r\n    chain();\r\n  },\r\n\r\n  fetchAll : function (chain){\r\n\r\n    var contact_url = this.icloud.session.webservices.contacts.url;\r\n    contact_url = util.format(\"%s/co/startup\", contact_url);\r\n\r\n    //params = merge(params, {'dsid': session['dsInfo']['dsid']});\r\n    var params = merge({}, {\r\n    //    clientVersion : \"2.1\",\r\n        locale : \"en_US\",\r\n        order : \"last,first\",\r\n    });\r\n\r\n    var query = merge(url.parse(contact_url), {\r\n      qs : params,\r\n    });\r\n\r\n    this.icloud.request(query, null, function(err, body){\r\n      console.log(res.statusCode, body);\r\n    });\r\n\r\n  }\r\n\r\n});\r\n\r\n\r\nmodule.exports = Contact;\r\n","/home/travis/build/npmtest/node-npmtest-icloud-api/node_modules/icloud-api/lib/services/account.js":"\"use strict\";\r\n\r\n\r\nvar url    = require('url');\r\nvar util   = require('util');\r\nvar qs     = require('querystring');\r\nvar Class  = require('uclass');\r\n\r\n\r\n\r\nvar Account = new Class({\r\n\r\n\r\n  initialize : function(icloud, chain){\r\n\r\n    var self = this;\r\n\r\n    this.icloud = icloud;\r\n\r\n    var service_root = icloud.session.webservices['account']['url'];\r\n    var base_url     = util.format(\"%s/setup/ws/1/storageUsageInfo\", service_root);\r\n    var query = url.parse(base_url);\r\n    this.icloud.request(query, null, function(err, body){\r\n      if(err)\r\n        return chain(err);\r\n\r\n      console.log(\"GOT RESPONSE\", err, body);\r\n      chain();\r\n\r\n    });\r\n  },\r\n\r\n\r\n\r\n});\r\n\r\n\r\nmodule.exports = Account;\r\n","/home/travis/build/npmtest/node-npmtest-icloud-api/node_modules/icloud-api/lib/services/file.js":"\"use strict\";\r\n\r\n\r\nvar url    = require('url');\r\nvar util   = require('util');\r\nvar qs     = require('querystring');\r\nvar Class  = require('uclass');\r\n\r\nvar pluck   = require('mout/array/pluck');\r\nvar reindex = require('nyks/collection/reindex');\r\n\r\nvar File = new Class({\r\n\r\n\r\n\r\n  initialize : function(icloud, chain){\r\n\r\n    var self = this;\r\n\r\n    this.icloud = icloud;\r\n\r\n    this.service_root = icloud.session.webservices['drivews']['url'];\r\n\r\n    chain();\r\n  },\r\n\r\n  fetchDirectories : function(chain){\r\n    this.dir(\"FOLDER::com.apple.CloudDocs::root\", chain);\r\n  },\r\n  \r\n  fetchDirectoryTree : function(chain, folderId, tree){\r\n    if(!folderId)\r\n      folderId = \"FOLDER::com.apple.CloudDocs::root\";\r\n    if(!tree)\r\n      tree = {};\r\n\r\n\r\n    this.dir(folderId, function(err, directories){\r\n\r\n      directories = reindex(directories, \"drivewsid\");\r\n      if(!directories[folderId])\r\n        return chain();      \r\n\r\n\r\n      var children = [];\r\n      directories[folderId].items.forEach(function(v){\r\n        if(v.type == \"FOLDER\")\r\n          children.push(v['drivewsid']);\r\n      });\r\n\r\n      async.series(children, function(v, chain) {\r\n        self.fetchDirectoryTree(chain, v, tree);\r\n      }, function(){\r\n\r\n      });\r\n\r\n\r\n    });\r\n  },\r\n\r\n\r\n  dir : function(folderId, chain){\r\n    var base_url = util.format(\"%s/retrieveItemDetailsInFolders\", this.service_root);\r\n\r\n    var query = url.parse(base_url);\r\n\r\n    var params = [{\r\n      \"drivewsid\":folderId,\r\n      \"partialData\":false\r\n    }];\r\n\r\n    this.icloud.request(query, params, chain);\r\n  },\r\n});\r\n\r\n\r\nmodule.exports = File;\r\n"}